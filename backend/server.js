const express = require('express');
const multer = require('multer');
const pdfParse = require('pdf-parse');
const fs = require('fs');
const axios = require('axios');

const app = express();
const port = 3000;

// Configuration Multer pour accepter plusieurs fichiers
const upload = multer({ 
  dest: 'uploads/',
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB max
  }
});

// Configuration de LM Studio
const LM_STUDIO_URL = process.env.LM_STUDIO_URL || 'http://192.168.1.11:1234';

app.use(require('cors')());
app.use(express.json());

// V√©rification de la connexion √† LM Studio
async function checkLMStudioConnection() {
  try {
    await axios.get(`${LM_STUDIO_URL}/v1/models`);
    console.log('‚úÖ Connexion √† LM Studio √©tablie');
    return true;
  } catch (error) {
    console.error('‚ùå Impossible de se connecter √† LM Studio:', error.message);
    return false;
  }
}

// Mise √† jour de l'endpoint pour accepter plusieurs fichiers
app.post('/api/analyze-ebook', upload.fields([
  { name: 'ebook', maxCount: 1 },
  { name: 'coverImage', maxCount: 1 }
]), async (req, res) => {
  let ebookPath = null;
  let coverImagePath = null;

  try {
    // R√©cup√©ration des fichiers
    if (!req.files || !req.files.ebook) {
      return res.status(400).json({ error: 'Aucun fichier ebook fourni' });
    }

    ebookPath = req.files.ebook[0].path;
    if (req.files.coverImage) {
      coverImagePath = req.files.coverImage[0].path;
    }

    // R√©cup√©ration des donn√©es suppl√©mentaires
    const quizConfig = req.body.quizConfig ? JSON.parse(req.body.quizConfig) : { chapters: 1, quizzes: 5 };
    const infos = req.body.infos ? JSON.parse(req.body.infos) : {};

    console.log('üìö Lecture du PDF...', { quizConfig, infos });
    const dataBuffer = fs.readFileSync(ebookPath);
    const pdfData = await pdfParse(dataBuffer);
    const text = pdfData.text.slice(0, 8000);
    console.log('‚úÖ PDF lu avec succ√®s');

    console.log('ü§ñ Envoi √† LM Studio...');
    const prompt = buildPrompt(text, quizConfig, infos);
    const aiResponse = await callLMStudio(prompt);
    console.log('‚úÖ R√©ponse re√ßue de LM Studio');
    
    console.log('üîç Parsing de la r√©ponse...');
    const { chapters } = parseAIResponse(aiResponse);
    console.log('‚úÖ Parsing r√©ussi');

    // Nettoyage des fichiers temporaires
    if (ebookPath && fs.existsSync(ebookPath)) {
      fs.unlinkSync(ebookPath);
    }
    if (coverImagePath && fs.existsSync(coverImagePath)) {
      fs.unlinkSync(coverImagePath);
    }

    res.json({ 
      chapters: chapters,
      receivedConfig: quizConfig,
      receivedInfos: infos
    });

  } catch (err) {
    console.error('‚ùå Erreur:', err.message);
    
    // Nettoyage en cas d'erreur
    if (ebookPath && fs.existsSync(ebookPath)) {
      fs.unlinkSync(ebookPath);
    }
    if (coverImagePath && fs.existsSync(coverImagePath)) {
      fs.unlinkSync(coverImagePath);
    }
    
    res.status(500).json({ 
      error: 'Erreur lors de la g√©n√©ration du contenu',
      details: err.message
    });
  }
});

app.listen(port, async () => {
  console.log(`‚úÖ Serveur backend en √©coute sur http://localhost:${port}`);
  const isLMStudioConnected = await checkLMStudioConnection();
  if (!isLMStudioConnected) {
    console.warn('‚ö†Ô∏è Le serveur d√©marre mais LM Studio n\'est pas accessible');
  }
});

function buildPrompt(text, quizConfig = { chapters: 3, quizzes: 5 }, infos = {}) {
  return `
Tu es une IA √©ducative fran√ßaise. Tu dois OBLIGATOIREMENT g√©n√©rer une structure de formation avec 3 chapitres EN FRAN√áAIS.

TR√àS IMPORTANT: 
- R√©ponds UNIQUEMENT en FRAN√áAIS
- Tout le contenu doit √™tre en FRAN√áAIS (titres, descriptions, questions, options)
- Tu dois r√©pondre UNIQUEMENT avec le JSON suivant, rien d'autre

Analyse ce contenu de cours:
"""
${text}
"""

G√©n√®re EXACTEMENT cette structure JSON (remplace les [...] par du contenu adapt√© au document EN FRAN√áAIS):

{
  "chapters": [
    {
      "id": 1,
      "title": "[Titre du chapitre 1 bas√© sur le contenu - EN FRAN√áAIS]",
      "courses": [
        {
          "id": 1,
          "title": "[Titre du cours bas√© sur le contenu - EN FRAN√áAIS]",
          "duration": "4:30",
          "content": "[Description d√©taill√©e du cours en 2-3 phrases bas√©e sur le contenu du PDF - EN FRAN√áAIS]"
        }
      ],
      "quizzes": [
        {
          "id": 1,
          "title": "Test - Chapitre 1",
          "question": "[Question bas√©e sur le contenu du chapitre - EN FRAN√áAIS]",
          "options": {
            "A": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "B": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "C": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "D": "[Option bas√©e sur le contenu - EN FRAN√áAIS]"
          },
          "correctAnswer": "A"
        }
      ]
    },
    {
      "id": 2,
      "title": "[Titre du chapitre 2 bas√© sur le contenu - EN FRAN√áAIS]",
      "courses": [
        {
          "id": 2,
          "title": "[Titre du cours bas√© sur le contenu - EN FRAN√áAIS]",
          "duration": "5:15",
          "content": "[Description d√©taill√©e du cours en 2-3 phrases bas√©e sur le contenu du PDF - EN FRAN√áAIS]"
        }
      ],
      "quizzes": [
        {
          "id": 2,
          "title": "Test - Chapitre 2",
          "question": "[Question bas√©e sur le contenu du chapitre - EN FRAN√áAIS]",
          "options": {
            "A": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "B": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "C": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "D": "[Option bas√©e sur le contenu - EN FRAN√áAIS]"
          },
          "correctAnswer": "B"
        }
      ]
    },
    {
      "id": 3,
      "title": "[Titre du chapitre 3 bas√© sur le contenu - EN FRAN√áAIS]",
      "courses": [
        {
          "id": 3,
          "title": "[Titre du cours bas√© sur le contenu - EN FRAN√áAIS]",
          "duration": "6:00",
          "content": "[Description d√©taill√©e du cours en 2-3 phrases bas√©e sur le contenu du PDF - EN FRAN√áAIS]"
        }
      ],
      "quizzes": [
        {
          "id": 3,
          "title": "Test - Chapitre 3",
          "question": "[Question bas√©e sur le contenu du chapitre - EN FRAN√áAIS]",
          "options": {
            "A": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "B": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "C": "[Option bas√©e sur le contenu - EN FRAN√áAIS]",
            "D": "[Option bas√©e sur le contenu - EN FRAN√áAIS]"
          },
          "correctAnswer": "C"
        }
      ]
    }
  ]
}

R√àGLES STRICTES:
- R√©ponds UNIQUEMENT avec ce JSON
- Remplace tous les [...] par du contenu r√©el EN FRAN√áAIS
- 3 chapitres OBLIGATOIRES
- Minimum 1 cours et 1 quiz par chapitre
- Tu peux ajouter plus de cours/quiz si tu veux
- Dur√©es entre 3:00 et 8:00
- TOUT LE CONTENU DOIT √äTRE EN FRAN√áAIS
`;
}

function parseAIResponse(response) {
  try {
    console.log('üîç D√©but du parsing de la r√©ponse...');
    
    // Si la r√©ponse est d√©j√† un objet (cas de LM Studio)
    if (typeof response === 'object' && response.choices) {
      let content = response.choices[0].message.content;
      console.log('üìù Contenu brut re√ßu:', content);
      
      // Nettoie la r√©ponse pour s'assurer qu'elle ne contient que du JSON
      content = content.replace(/```json\n?|\n?```/g, '').trim();
      
      // Supprime tout texte avant le premier {
      const firstBrace = content.indexOf('{');
      if (firstBrace > 0) {
        content = content.substring(firstBrace);
      }
      
      // Gestion sp√©ciale pour JSON coup√© - essayer de le compl√©ter
      let cleanContent = content;
      const lastBrace = content.lastIndexOf('}');
      
      // Si le JSON semble coup√©, essayer de le r√©parer
      if (lastBrace === -1 || !content.trim().endsWith('}')) {
        console.log('üîß JSON semble coup√©, tentative de r√©paration...');
        
        // Chercher le dernier chapitre complet
        const chaptersMatch = content.match(/"chapters":\s*\[(.*)/s);
        if (chaptersMatch) {
          const chaptersContent = chaptersMatch[1];
          
          // Compter les accolades ouvertes vs ferm√©es pour voir o√π on en est
          let openBraces = 0;
          let lastCompleteChapter = 0;
          
          for (let i = 0; i < chaptersContent.length; i++) {
            if (chaptersContent[i] === '{') openBraces++;
            if (chaptersContent[i] === '}') {
              openBraces--;
              if (openBraces === 0) {
                lastCompleteChapter = i;
              }
            }
          }
          
          if (lastCompleteChapter > 0) {
            // Reconstruit le JSON avec les chapitres complets
            const validChapters = chaptersContent.substring(0, lastCompleteChapter + 1);
            cleanContent = `{"chapters":[${validChapters}]}`;
            console.log('üîß JSON r√©par√©:', cleanContent);
          }
        }
      } else {
        // Supprime tout texte apr√®s le dernier }
        if (lastBrace !== -1 && lastBrace < content.length - 1) {
          cleanContent = content.substring(0, lastBrace + 1);
        }
      }
      
      console.log('üßπ JSON nettoy√©:', cleanContent);
      
      const parsed = JSON.parse(cleanContent);
      console.log('‚úÖ Parsing JSON r√©ussi');
      
      // Validation des donn√©es
      if (!parsed.chapters || !Array.isArray(parsed.chapters)) {
        throw new Error('Structure JSON invalide - chapitres manquants');
      }
      
      console.log(`üìä ${parsed.chapters.length} chapitres trouv√©s`);
      
      // Si on a moins de 3 chapitres mais au moins 1, on garde ce qu'on a
      if (parsed.chapters.length === 0) {
        throw new Error('Aucun chapitre trouv√©');
      }
      
      // Validation de chaque chapitre
      parsed.chapters.forEach((chapter, index) => {
        if (!chapter.title || !chapter.courses || !chapter.quizzes) {
          throw new Error(`Chapitre ${index + 1} invalide - champs manquants`);
        }
        if (!Array.isArray(chapter.courses) || !Array.isArray(chapter.quizzes)) {
          throw new Error(`Chapitre ${index + 1} invalide - cours ou quiz ne sont pas des tableaux`);
        }
        if (chapter.courses.length === 0 || chapter.quizzes.length === 0) {
          throw new Error(`Chapitre ${index + 1} invalide - doit avoir au moins 1 cours et 1 quiz`);
        }
      });
      
      console.log(`‚úÖ ${parsed.chapters.length} chapitres valid√©s avec succ√®s`);
      
      return {
        chapters: parsed.chapters
      };
    }

    throw new Error('Format de r√©ponse invalide de LM Studio');
  } catch (error) {
    console.error('‚ùå Erreur parsing r√©ponse IA:', error);
    console.error('üìÑ Contenu qui a caus√© l\'erreur:', response?.choices?.[0]?.message?.content?.substring(0, 500));
    
    // En cas d'erreur, retourner une r√©ponse par d√©faut bas√©e sur Elevator Pitch
    console.log('üîß G√©n√©ration d\'une r√©ponse par d√©faut bas√©e sur Elevator Pitch...');
    return {
      chapters: [
        {
          id: 1,
          title: "Introduction √† l'elevator pitch",
          courses: [
            {
              id: 1,
              title: "Concept et importance de l'elevator pitch",
              duration: "4:30",
              content: "L'elevator pitch est un pitch court et convaincant qui r√©sume une id√©e, un projet ou un produit en quelques minutes. D√©couvrez son importance dans le monde des affaires."
            }
          ],
          quizzes: [
            {
              id: 1,
              title: "Test - Chapitre 1",
              question: "Qu'est-ce que l'elevator pitch ?",
              options: {
                A: "Un discours long et complexe",
                B: "Une courte pr√©sentation convaincante",
                C: "Une r√©union en elevator",
                D: "Un type de pitch business"
              },
              correctAnswer: "B"
            }
          ]
        },
        {
          id: 2,
          title: "Les composants cl√©s",
          courses: [
            {
              id: 2,
              title: "Composantes cl√©s d'un elevator pitch",
              duration: "5:15",
              content: "Dans cette section, nous examinerons les diff√©rentes composantes cl√©s d'un elevator pitch, telles que la concision, la clart√©, la cr√©dibilit√© et la conceptualisation."
            }
          ],
          quizzes: [
            {
              id: 2,
              title: "Test - Chapitre 2",
              question: "Quelles sont les composantes cl√©s d'un elevator pitch ?",
              options: {
                A: "Concis, Clair, Convaincant et Conceptuel",
                B: "Long, Confus, Pas convaincant et Non conceptuel",
                C: "Concis, Non clair, Non convaincant et Non conceptuel",
                D: "Concis, Clair, Convaincant, Conceptuel et Concret"
              },
              correctAnswer: "A"
            }
          ]
        },
        {
          id: 3,
          title: "La structure",
          courses: [
            {
              id: 3,
              title: "Structure d'un elevator pitch",
              duration: "6:00",
              content: "Dans cette section, nous examinerons la structure typique d'un elevator pitch, telle que d√©crite par Chris O'Leary. Nous explorerons √©galement d'autres structures de pitch."
            }
          ],
          quizzes: [
            {
              id: 3,
              title: "Test - Chapitre 3",
              question: "Quelle est la structure typique d'un elevator pitch ?",
              options: {
                A: "Introduction, d√©veloppement, conclusion",
                B: "Pr√©sentation, argumentation, appel √† l'action",
                C: "Probl√®me, solution, b√©n√©fices",
                D: "Qui, quoi, pourquoi, comment"
              },
              correctAnswer: "C"
            }
          ]
        }
      ]
    };
  }
}

async function callLMStudio(prompt) {
  try {
    console.log('üì° Envoi de la requ√™te √† LM Studio...');
    const response = await axios.post(`${LM_STUDIO_URL}/v1/chat/completions`, {
      model: "local-model",
      messages: [
        { role: "system", content: "Tu es un assistant p√©dagogique fran√ßais qui r√©pond uniquement en JSON valide EN FRAN√áAIS. Tout le contenu que tu g√©n√®res doit √™tre en fran√ßais." },
        { role: "user", content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 1000
    });

    console.log('‚úÖ R√©ponse re√ßue de LM Studio');
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur appel LM Studio:', error.message);
    throw new Error(`Erreur de communication avec LM Studio: ${error.message}`);
  }
}
